'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Server factory
 */
var ServerFactory = function () {
  function ServerFactory() {
    _classCallCheck(this, ServerFactory);
  }

  _createClass(ServerFactory, null, [{
    key: 'create',

    /**
     * Creates server instance based on engine type.
     * @param {ServerFactory.Types} type Server engine types.
     * @return {Server}
     * @throws Error
     */
    value: function create() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ServerFactory.Types.EXPRESS;

      switch (type) {
        case ServerFactory.Types.EXPRESS:
          return new _server2.default((0, _express2.default)());
        default:
          throw new Error('Engine not implemented');
      }
    }
  }]);

  return ServerFactory;
}();

/**
 * Server engine types.
 * @enum {string}
 */


ServerFactory.Types = {
  EXPRESS: 'express'
};

exports.default = ServerFactory;