'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConfig = undefined;

var _metalAssertions = require('metal-assertions');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseConfig = function baseConfig() {
  return {
    magnet: {
      dev: false,
      host: '0.0.0.0',
      ignore: ['build/**', 'magnet.config.js', 'node_modules/**', 'static/**', 'test/**'],
      logLevel: 'info',
      port: 3000,
      src: ['**/*.js'],
      plugins: ['function', 'controller'],
      pluginsConfig: {},
      webpack: null
    }
  };
};

/**
 * Creates configuration.
 * @param {!string} directory
 * @param {!string} config Config filename.
 * @param {!string} configDir Config directory.
 * @return {Object}
 */
function createConfig(directory, config, configDir) {
  (0, _metalAssertions.assertDefAndNotNull)(directory, 'Directory must be specified.');
  (0, _metalAssertions.assertDefAndNotNull)(config, 'Config filename must be specified.');
  (0, _metalAssertions.assertDefAndNotNull)(configDir, 'Config directory must be specified.');

  var ext = {};
  var file = _path2.default.resolve(directory, configDir, config);

  if (_fs2.default.existsSync(file)) {
    ext = require(file);
  }

  return deepMerge_(baseConfig(), ext);
}

/**
 * Deep merges object.
 * @param {!Object} destination Destination object.
 * @param {!Object} source Source object.
 * @return {Object} Returns the result of mergint the two params.
 * @private
 */
function deepMerge_(destination, source) {
  for (var property in source) {
    if (source[property] && source[property].constructor && source[property].constructor === Object) {
      destination[property] = destination[property] || {};
      deepMerge_(destination[property], source[property]);
    } else {
      destination[property] = source[property];
    }
  }
  return destination;
}

exports.createConfig = createConfig;