#!/usr/bin/env node
'use strict';

var _routes = require('../routes');

var _ = require('../');

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.stdin.pause();

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    c: 'config',
    C: 'config-dir'
  },
  boolean: ['h']
});

if (argv.help) {
  console.log('\n    Description\n      Builds and starts the application in development mode.\n    Usage\n      $ magnet dev [-c <config file path>] [-C <config dir>]\n    Options\n      --config, -c        Config file path [default: magnet.config.js]\n      --config-dir, -C    Directory to load configuration files from\n      --help, -h          Displays this message\n  ');
  process.exit(0);
}

var config = argv['config'];
var configDir = argv['config-dir'];
var directory = process.cwd();
var magnet = new _.Magnet({ config: config, configDir: configDir, directory: directory });

magnet.build().then(function () {
  var routes = (0, _routes.getRoutesTable)(magnet);
  if (routes) {
    _log2.default.infoNoPrefix(false, '\n' + routes + '\n');
  }
}).then(function () {
  return magnet.start();
}).catch(function (error) {
  if (error.code === 'EADDRINUSE') {
    var errorMessage = 'Port ' + argv.port + ' is already in use.';
    _log2.default.error(false, errorMessage);
  } else {
    _log2.default.error(false, error);
  }
  process.nextTick(function () {
    return process.exit(1);
  });
});

process.on('SIGTERM', function (error) {
  if (magnet) magnet.stop();
});

process.on('SIGINT', function (error) {
  if (magnet) magnet.stop();
  process.nextTick(function () {
    return process.exit(1);
  });
});