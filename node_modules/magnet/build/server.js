'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metalAssertions = require('metal-assertions');

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Server runtime.
 */
var Server = function () {
  /**
   * Constructor.
   * @param {!Object} engine
   */
  function Server(engine) {
    _classCallCheck(this, Server);

    (0, _metalAssertions.assertDefAndNotNull)(engine, 'Magnet server engine is required');

    /**
     * Server engine.
     * @type {Object}
     * @private
     */
    this.engine_ = engine;

    /**
     * Http server.
     * @type {Http.net.Server}
     * @private
     */
    this.httpServer_ = _http2.default.createServer(engine);
  }

  /**
   * Closes http server.
   * @return {Promise} Returns promise that resolves when http server is closed.
   */


  _createClass(Server, [{
    key: 'close',
    value: function close() {
      var _this = this;

      return new Promise(function (resolve) {
        _this.getHttpServer().close(function () {
          return resolve();
        });
      });
    }

    /**
     * Gets server engine.
     * @return {Object}
     */

  }, {
    key: 'getEngine',
    value: function getEngine() {
      return this.engine_;
    }

    /**
     * Gets server port.
     * @return {number}
     */

  }, {
    key: 'getPort',
    value: function getPort() {
      return this.port_;
    }

    /**
     * Set server port.
     * @param {number} port
     * @return {Server}
     */

  }, {
    key: 'setPort',
    value: function setPort(port) {
      this.port_ = port;
      return this;
    }

    /**
     * Set server host.
     * @param {string} host
     * @return {Server}
     */

  }, {
    key: 'setHost',
    value: function setHost(host) {
      this.host_ = host;
      return this;
    }

    /**
     * Gets server host.
     * @return {string}
     */

  }, {
    key: 'getHost',
    value: function getHost() {
      return this.host_;
    }

    /**
     * Gets http server.
     * @return {Http.net.Server}
     */

  }, {
    key: 'getHttpServer',
    value: function getHttpServer() {
      return this.httpServer_;
    }

    /**
     * Starts listening to specified host and port.
     * @return {Server} Returns server instance.
     */

  }, {
    key: 'listen',
    value: function listen() {
      var _this2 = this;

      this.getHttpServer().listen(this.getPort(), this.getHost(), function () {
        return _log2.default.info(false, 'Ready on http://' + _this2.getHost() + ':' + _this2.getPort());
      });
      return this;
    }
  }]);

  return Server;
}();

exports.default = Server;