'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _metalAssertions = require('metal-assertions');

var _client = require('./build/client');

var _server = require('./build/server');

var _config = require('./config');

var _error = require('./middleware/error');

var _metal = require('metal');

var _validatorError = require('./middleware/validator-error');

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _expressValidator = require('express-validator');

var _expressValidator2 = _interopRequireDefault(_expressValidator);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _helmet = require('helmet');

var _helmet2 = _interopRequireDefault(_helmet);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _multer = require('multer');

var _multer2 = _interopRequireDefault(_multer);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _serverFactory = require('./server-factory');

var _serverFactory2 = _interopRequireDefault(_serverFactory);

var _webpack = require('./build/webpack');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Magnet class that handle configuration, directory injection, and server.
 * @class
 */
var Magnet = function () {
  /**
   * Constructor.
   * @param {!Object} options Magnet options.
   */
  function Magnet(options) {
    _classCallCheck(this, Magnet);

    (0, _metalAssertions.assertDefAndNotNull)(options, 'Magnet options are required, ' + 'try: new Magnet({directory: \'/app\'}).');
    (0, _metalAssertions.assertDefAndNotNull)(options.directory, 'Magnet directory is required, ' + 'try: new Magnet({directory: \'/app\'}).');

    /**
     * Configuration object.
     * @type {!object}
     * @protected
     */
    this.config = Magnet.resolveConfig(options.directory, options.config, options.configDir);

    /**
     * Sync log level to the one set on this instance.
     * @type {!string}
     * @protected
     */
    _log2.default.level = this.config.magnet.logLevel;

    /**
     * Directory to start magnet application.
     * @type {!string}
     * @private
     */
    this.directory_ = options.directory;

    /**
     * Default server runtime used to handle http requests.
     * @type {!Server}
     * @private
     */
    this.server_ = _serverFactory2.default.create();

    /**
     * Magnet plugins.
     * @type {!Array}
     * @private
     */
    this.plugins_ = [];

    this.setupMiddlewares_();
    this.setupApplicationSettings_();
    this.registerWebpackConfig_();
    this.registerPlugins_();
  }

  /**
   * Adds plugin.
   * @param {Object} plugin
   */


  _createClass(Magnet, [{
    key: 'addPlugin',
    value: function addPlugin(plugin) {
      this.plugins_.push(plugin);
    }

    /**
     * Builds application.
     */

  }, {
    key: 'build',
    value: async function build() {
      await this.maybeBuildPlugins_();
      await (0, _client.buildClient)(this);

      var files = this.getBuildFiles({ directory: this.getDirectory() });
      if (!files.length) {
        return;
      }

      await (0, _server.buildServer)(files, this.getDirectory(), this.getServerDistDirectory(), this.getPlugins());
    }

    /**
     * Gets config.
     * @return {Object}
     */

  }, {
    key: 'getConfig',
    value: function getConfig() {
      return this.config;
    }

    /**
     * Gets directory.
     * @return {string}
     */

  }, {
    key: 'getDirectory',
    value: function getDirectory() {
      return this.directory_;
    }

    /**
     * Scans files that matches with `config.magnet.src` globs.
     * excluding `config.magnet.ignore`.
     * @param {!string} directory
     * @param {?boolean} realpath Whether should return the files real path.
     * @param {?array.<string>} src
     * @param {?array.<string>} ignore
     * @return {array.<string>} Array of file paths.
     */

  }, {
    key: 'getFiles',
    value: function getFiles(_ref) {
      var directory = _ref.directory,
          _ref$realpath = _ref.realpath,
          realpath = _ref$realpath === undefined ? false : _ref$realpath,
          _ref$src = _ref.src,
          src = _ref$src === undefined ? this.config.magnet.src : _ref$src,
          _ref$ignore = _ref.ignore,
          ignore = _ref$ignore === undefined ? this.config.magnet.ignore : _ref$ignore;

      var files = [];
      src.forEach(function (pattern) {
        files = files.concat(_glob2.default.sync(pattern, { cwd: directory, ignore: ignore, realpath: realpath }));
      });
      if (!realpath) {
        // Normalize globs of relative paths to start with './'.
        files = files.map(function (file) {
          if (_path2.default.isAbsolute(file)) {
            return file;
          }
          return '.' + _path2.default.sep + _path2.default.join(file);
        });
      }
      return [].concat(_toConsumableArray(new Set(files)));
    }

    /**
     * Scans files that matches with `config.magnet.src` globs.
     * excluding `config.magnet.ignore`, start.js and stop.js.
     * @return {Array.<string>} Array of file paths.
     */

  }, {
    key: 'getLoadFiles',
    value: function getLoadFiles() {
      var directory = this.getServerDistDirectory();
      return this.getFiles({ directory: directory, realpath: true }).filter(function (item) {
        switch (item) {
          case _path2.default.join(directory, Magnet.LifecyleFiles.START):
          case _path2.default.join(directory, Magnet.LifecyleFiles.STOP):
            return false;
          default:
            return true;
        }
      });
    }

    /**
     * Scans files that matches with `config.magnet.src` globs.
     * excluding `config.magnet.ignore`, adding start.js and stop.js.
     * @return {Array.<string>} Array of file paths.
     */

  }, {
    key: 'getBuildFiles',
    value: function getBuildFiles() {
      var directory = this.getDirectory();
      var src = this.config.magnet.src.concat([Magnet.LifecyleFiles.START, Magnet.LifecyleFiles.STOP]);
      return this.getFiles({ directory: directory, src: src });
    }

    /**
     * Returns magnet plugins.
     * @return {Array.<Object>}
     * @protected
     */

  }, {
    key: 'getPlugins',
    value: function getPlugins() {
      return this.plugins_;
    }

    /**
     * Gets server runtime.
     * @return {Server}
     */

  }, {
    key: 'getServer',
    value: function getServer() {
      return this.server_;
    }

    /**
     * Gets server dist directory.
     * @return {string}
     */

  }, {
    key: 'getServerDistDirectory',
    value: function getServerDistDirectory() {
      return _path2.default.join(this.directory_, '.magnet', 'server');
    }

    /**
     * Gets static files dist directory.
     * @return {string}
     */

  }, {
    key: 'getStaticDistDirectory',
    value: function getStaticDistDirectory() {
      return _path2.default.join(this.directory_, 'static');
    }

    /**
     * Checks if server dist directory exists.
     * @return {boolean}
     */

  }, {
    key: 'hasServerDistDirectory',
    value: function hasServerDistDirectory() {
      try {
        _fsExtra2.default.accessSync(this.getServerDistDirectory());
        return true;
      } catch (error) {
        return false;
      }
    }

    /**
     * Loads application.
     * @protected
     */

  }, {
    key: 'load',
    value: async function load() {
      var dist = this.getServerDistDirectory();
      var files = this.getLoadFiles({ directory: dist, realpath: true });

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var file = _step.value;

          var module = require(file);
          try {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = this.getPlugins()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var plugin = _step2.value;

                if (plugin.test(module, file, this)) {
                  plugin.register(module, file, this);
                  break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          } catch (error) {
            _log2.default.error(false, error);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    /**
     * Maybe build plugins.
     * @param {Magnet} magnet
     * @private
     */

  }, {
    key: 'maybeBuildPlugins_',
    value: async function maybeBuildPlugins_() {
      try {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.getPlugins()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var plugin = _step3.value;

            if ((0, _metal.isFunction)(plugin.build)) {
              await plugin.build(this);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      } catch (error) {
        _log2.default.error(false, error);
      }
    }

    /**
     * Maybe run lifecycle file.
     * @param {!string} lifecycleFile
     * @private
     */

  }, {
    key: 'maybeRunLifecycleFile_',
    value: async function maybeRunLifecycleFile_(lifecycleFile) {
      var file = _path2.default.resolve(this.getServerDistDirectory(), lifecycleFile);
      if (_fsExtra2.default.existsSync(file)) {
        var fn = require(file);
        if (fn.default) {
          fn = fn.default;
        }
        if ((0, _metal.isFunction)(fn)) {
          var app = this.getServer().getEngine();
          fn.call(this, app, this);
        }
      }
    }

    /**
     * Register magnet plugins.
     * @private
     */

  }, {
    key: 'registerPlugins_',
    value: function registerPlugins_() {
      var config = this.getConfig();
      var pluginPrefix = 'magnet-plugin-';

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = config.magnet.plugins[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var plugin = _step4.value;

          if ((0, _metal.isString)(plugin)) {
            var resolvedPath = _resolve2.default.sync('' + pluginPrefix + plugin, {
              basedir: process.cwd()
            });
            plugin = require(resolvedPath);
          }

          if (plugin.default) {
            plugin = plugin.default;
          }
          this.addPlugin(plugin);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }

    /**
     * Resolves configuration using environment `NODE_ENV` or the specified
     * `config` filename. Note that the configuration directory can be specified
     * as `configDir`.
     * @param {!string} directory
     * @param {?string=} config Optional config filename.
     * @param {?string=} configDir Optional config directory.
     * @param {?boolean=} showLog Display log of loaded config filename.
     * @return {Object} Configuration object.
     * @static
     */

  }, {
    key: 'setupMiddlewareBodyParser_',


    /**
     * Setup body parser middleware.
     * @private
     */
    value: function setupMiddlewareBodyParser_() {
      this.getServer().getEngine().use(_bodyParser2.default.urlencoded({ extended: false }));

      this.getServer().getEngine().use(_bodyParser2.default.json());
    }

    /**
     * Setup compression middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareCompression_',
    value: function setupMiddlewareCompression_() {
      this.getServer().getEngine().use((0, _compression2.default)());
    }

    /**
     * Setup error middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareError_',
    value: function setupMiddlewareError_() {
      this.getServer().getEngine().use((0, _validatorError.validatorErrorMiddleware)());
      this.getServer().getEngine().use((0, _error.errorMiddleware)());
    }

    /**
     * Setup http logger middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareHttpLogger_',
    value: function setupMiddlewareHttpLogger_() {
      switch (this.config.magnet.logLevel) {
        case 'silent':
          return;
      }
      this.getServer().getEngine().use((0, _morgan2.default)('tiny'));
    }

    /**
     * Setup multipart form data parser middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareMultipart_',
    value: function setupMiddlewareMultipart_() {
      this.getServer().getEngine().use((0, _multer2.default)().any());
    }

    /**
     * Setup validator middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareValidator_',
    value: function setupMiddlewareValidator_() {
      this.getServer().getEngine().use((0, _expressValidator2.default)({
        customValidators: {
          custom: function custom(value, fn) {
            return fn(value);
          }
        },
        errorFormatter: function errorFormatter(param, msg, value) {
          return {
            reason: msg,
            context: {
              param: param,
              value: value
            }
          };
        }
      }));
    }

    /**
     * Setup engine application settings.
     * @private
     */

  }, {
    key: 'setupApplicationSettings_',
    value: function setupApplicationSettings_() {
      this.getServer().getEngine().set('trust proxy', true);
    }

    /**
     * Setup engine middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewares_',
    value: function setupMiddlewares_() {
      if (this.getConfig().magnet.dev) {
        this.setupMiddlewareDevelopment_();
      }
      this.setupMiddlewareSecurity_();
      this.setupMiddlewareBodyParser_();
      this.setupMiddlewareMultipart_();
      this.setupMiddlewareCompression_();
      this.setupMiddlewareHttpLogger_();
      this.setupMiddlewareValidator_();
      this.setupMiddlewareStaticFiles_();
    }

    /**
     * Setup security middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareSecurity_',
    value: function setupMiddlewareSecurity_() {
      this.getServer().getEngine().use((0, _helmet2.default)());
    }

    /**
     * Setup development middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareDevelopment_',
    value: function setupMiddlewareDevelopment_() {
      this.getServer().getEngine().use(function (req, res, next) {
        res.set('Connection', 'close');
        next();
      });
    }

    /**
     * Setup static files middleware.
     * @private
     */

  }, {
    key: 'setupMiddlewareStaticFiles_',
    value: function setupMiddlewareStaticFiles_() {
      this.getServer().getEngine().use('/static', _express2.default.static(this.getStaticDistDirectory()));
    }

    /**
     * Register default webpack config.
     */

  }, {
    key: 'registerWebpackConfig_',
    value: function registerWebpackConfig_() {
      this.webpackConfig = (0, _webpack.getDefaultWebpackConfig)(this);
    }

    /**
     * Starts plugins by calling their `start` method.
     * @private
     */

  }, {
    key: 'startPlugins',
    value: async function startPlugins() {
      _log2.default.info(false, 'Starting plugins…');

      try {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this.getPlugins()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var plugin = _step5.value;

            if ((0, _metal.isFunction)(plugin.start)) {
              await plugin.start(this);
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      } catch (error) {
        _log2.default.error(false, error);
      }
    }

    /**
     * Starts application.
     */

  }, {
    key: 'start',
    value: async function start() {
      var _this = this;

      this.maybeRunLifecycleFile_(Magnet.LifecyleFiles.START);

      await this.startPlugins();
      await this.load();

      this.setupMiddlewareError_();

      await new Promise(function (resolve, reject) {
        _this.getServer().getHttpServer().on('error', reject);
        _this.getServer().setPort(_this.config.magnet.port).setHost(_this.config.magnet.host).getHttpServer().on('listening', function () {
          return resolve();
        });
        _this.getServer().listen();
      });
    }

    /**
     * Stops application.
     */

  }, {
    key: 'stop',
    value: async function stop() {
      _log2.default.info(false, 'Shutting down gracefully…');
      this.maybeRunLifecycleFile_(Magnet.LifecyleFiles.STOP);
      await this.getServer().close();
    }
  }], [{
    key: 'resolveConfig',
    value: function resolveConfig(directory, config) {
      var configDir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var showLog = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      var lookupConfig = config;
      // Try loading config from environment...
      if (!lookupConfig) {
        var envConfig = 'magnet.' + process.env.NODE_ENV + '.config.js';
        if (_fsExtra2.default.existsSync(_path2.default.resolve(directory, configDir, envConfig))) {
          lookupConfig = envConfig;
        }
      }
      // If still not found, try loading default filename.
      if (!lookupConfig) {
        lookupConfig = 'magnet.config.js';
      }
      if (showLog) {
        _log2.default.info(false, 'Using ' + lookupConfig);
      }
      return (0, _config.createConfig)(directory, lookupConfig, configDir);
    }
  }]);

  return Magnet;
}();

/**
 * Magnet lifecycle files.
 * @static
 * @enum {string}
 */


Magnet.LifecyleFiles = {
  START: 'start.js',
  STOP: 'stop.js'
};

exports.default = Magnet;