'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildServer = buildServer;

var _babelCore = require('babel-core');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _babelPresetEs = require('babel-preset-es2015');

var _babelPresetEs2 = _interopRequireDefault(_babelPresetEs);

var _metal = require('metal');

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _jsdom = require('jsdom');

var _jsdom2 = _interopRequireDefault(_jsdom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JSDOM = _jsdom2.default.JSDOM;

var dom = new JSDOM();
global.document = dom.window.document;
global.window = dom.window;

/**
 * Aggregate babel presets.
 * @param {Array} plugins
 * @return {Array}
 */
var aggregateBabelPresets = function aggregateBabelPresets(plugins) {
  var presets = [_babelPresetEs2.default];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var plugin = _step.value;

      if ((0, _metal.isFunction)(plugin.babelPresets)) {
        presets = presets.concat(plugin.babelPresets());
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return presets;
};

/**
 * Builds server `files` into `outputPath`.
 * @param {!Array.<string>} files
 * @param {string} directory
 * @param {string} outputDirectory
 * @param {!Array} plugins
 * @return {Promise}
 */
async function buildServer(files, directory, outputDirectory) {
  var plugins = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  _log2.default.info(false, 'Building serverâ€¦');
  _fsExtra2.default.removeSync(outputDirectory);
  var presets = aggregateBabelPresets(plugins);

  return new Promise(function (resolve, reject) {
    files.forEach(function (file) {
      try {
        var absoluteSrc = _path2.default.join(directory, file);
        var absoluteDist = _path2.default.join(outputDirectory, file);
        var transform = (0, _babelCore.transformFileSync)(absoluteSrc, {
          presets: presets,
          babelrc: false,
          filename: absoluteSrc,
          filenameRelative: file
        });
        _fsExtra2.default.outputFileSync(absoluteDist, transform.code);
      } catch (error) {
        reject(error);
      }
    });
    resolve();
  });
}