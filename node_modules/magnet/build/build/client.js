'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildClient = buildClient;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _log = require('../log');

var _log2 = _interopRequireDefault(_log);

var _metal = require('metal');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Builds client using webpack config.
 * @param {Magnet} magnet
 */
async function buildClient(magnet) {
  _log2.default.info(false, 'Building clientâ€¦');
  await maybeSetupPluginsWebpack_(magnet);
  await maybeSetupMagnetWebpack_(magnet);
  if (Object.keys(magnet.webpackConfig.entry).length) {
    await runWebpack_(magnet);
  }
}

/**
 * Maybe run webpack if it has entries.
 * @param {Magnet} magnet
 * @return {Promise}
 * @private
 */
function runWebpack_(magnet) {
  return new Promise(function (resolve, reject) {
    (0, _webpack2.default)(magnet.webpackConfig, function (err, stats) {
      if (err) {
        _log2.default.error(false, err);
        reject(err);
      }
      var output = stats.toString({
        colors: true,
        chunks: false
      });
      resolve(output);
    });
  });
}

/**
 * Maybe setup Plugins webpack configuration.
 * @param {Magnet} magnet
 * @private
 */
async function maybeSetupPluginsWebpack_(magnet) {
  try {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = magnet.getPlugins()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var plugin = _step.value;

        if ((0, _metal.isFunction)(plugin.webpackConfig)) {
          magnet.webpackConfig = await plugin.webpackConfig(magnet.webpackConfig, magnet);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } catch (error) {
    _log2.default.error(false, error);
  }
}

/**
 * Maybe applies magnet webpack config.
 * @param {Magnet} magnet
 * @private
 */
async function maybeSetupMagnetWebpack_(magnet) {
  var magnetConfig = magnet.getConfig().magnet;

  if ((0, _metal.isFunction)(magnetConfig.webpack)) {
    magnet.webpackConfig = await magnetConfig.webpack(magnet.webpackConfig, magnet);
  }
}